#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################
#                                                                                     #
# readable_size - convert given decimal value to a better readable one using binary   #
#                 multiples of 2**10 for K, M, G or T (2**10, 2**20, 2**30, 2**40)    #
#                                                                                     #
# parameters:                                                                         #
#   $1 - the number to convert                                                        #
#   $2 - optional unit of measurement for the final expression                        #
#                                                                                     #
# stdout:                                                                             #
#   the expression with the requested format, with a space character between number   #
#   and unit                                                                          #
#                                                                                     #
# return code:                                                                        #
#   0 - conversion done                                                               #
#   1 - invalid input value or unit                                                   #
#   2 - the used shell doesn't support 64-bit arithmetics                             #
#                                                                                     #
# remarks:                                                                            #
#   If no unit was specified, the value will be normalized until the number part is   #
#   lower than 2 ** 10 or 2**40 was used as unit.                                     #
#   The used shell needs (usally) 64-bit support for numerical values or calculations #
#   aren't possible.                                                                  #
#   The input value may already contain a unit, it doesn't matter if it's in lower or #
#   upper case.                                                                       #
#   Localization for number formatting isn't supported - use the point (.) for any    #
#   fractional parts and comma (,) as thousands separator. No sign is accepted after  #
#   or before the number. For the fractional part of a number, only up to 3 digits    #
#   may be specified and fractions are only supported, if a unit was specified.       #
#   The script can't handle sizes >= 2 ** 53, because integer calculation with        #
#   fractions are only possible, if at least 10 bits are unused on input value.       #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: printf sed                                                                       #
# W: -                                                                                #
# F: yf_index                                                                         #
# I: -                                                                                #
# K: strings filesystem                                                               #
#                                                                                     #
#######################################################################################
yf_readable_size()
(
	v1K=1024
	v1M=$(( v1K * v1K ))
	v1G=$(( v1M * v1K ))
	v1T=$(( v1G * v1K ))
	[ $v1T -lt $v1M ] && return 2
	[ -z "$1" ] && return 1
	u="$(printf "%s\n" "$1" | sed -n -e "s|^[0-9,\.]* \?\([kKmMgGtT]\)\?\$|\1|p" | sed -e "y/kmgt/KMGT/")"
	v="$(printf "%s\n" "$1" | sed -n -e "s|^\([0-9,\.]*\) \?[kKmMgGtT]\?\$|\1|p" | sed -e "s|,||")"
	iu=1
	[ -z $u ] || iu=$(eval printf "%u" "\$v1$u")
	f=0
	[ $(yf_index $v .) -gt 0 ] && [ $iu -eq 1 ] && return 1
	if [ $(yf_index $v .) -gt 0 ]; then
		l=$(printf "$v\n" | sed -e "s|[^\.]||g")
		[ ${#l} -gt 1 ] && return 1
		f=$(printf "%s000\n" "${v##*.}" | sed -n -e "s|^\([0-9]\{3\}\).*\$|\1|p" | sed -e "s|^0*||")
		v=${v%%.*}
		f=$(( f * iu ))
		f=$(( ( f * v1K ) / 1000 )) 
	fi
	[ $(( v * iu )) -ge $(( 16384 * v1T )) ] && return 1
	v=$(( v * iu * v1K ))
	v=$(( v + f ))
	if ! [ -z "$2" ]; then
		case "$2" in
			([Kk])
				c=$(( v / v1K ))
				ou=$2
				;;
			([Mm])
				c=$(( v / v1M ))
				ou=$2
				;;
			([Gg])
				c=$(( v / v1G ))
				ou=$2
				;;
			([Tt])
				c=$(( v / v1T ))
				ou=$2
				;;
			(*)
				return 1
				;;
		esac
		d=$(( c % v1K ))
		c=$(( c / v1K ))
	else
		ou=""
		while [ $v -gt $v1M ]; do
			case $ou in
				(T)
					break
					;;
				(G)
					ou=T
					;;
				(M)
					ou=G
					;;
				(K)
					ou=M
					;;
				*)
					ou=K
					;;
			esac
			c=$(( v / v1K ))
			d=$(( v % v1K ))
			v=$(( v / v1K ))
		done
		d=$(( c % v1K ))
		c=$(( c / v1K ))
	fi
	if [ $d -ne 0 ]; then
		while [ $d -gt $(( v1K * 10 )) ]; do
			d=$(( d / v1K ))
		done
		d=$(( d * 1000 / v1K ))
		while [ $d -gt 1000 ]; do
			d=$(( ( d + 5 ) / 10 ))
		done
		d=$(( ( d + 5 ) / 10 ))
		d=$(printf "%02u\n" $d | sed -n -e "s|^\([0-9]\{2\}\).*\$|\1|p")
		while [ ${d%0} != $d ]; do
			d=${d%0}
		done
		printf "%u.%s %c\n" $c $d $ou
	else
		printf "%u %c\n" $c $ou
	fi				
)
