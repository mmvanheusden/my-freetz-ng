#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################
#                                                                                     #
# initialize_ringbuffer - initialize a file to be used with AVM's "showshringbuf"     #
#                         utility (a litte program supporting a file backed ring      #
#                         buffer maintaining a limited set of last messages due to    #
#                         overwriting the oldest messages with the newest ones)       #
#                                                                                     #
# parameters:                                                                         #
#   $1 - the "facility" to be used for the log file, the file is stored under /var as #
#        ".srb_$1", the name has to be a simple name of up to 8 lowercase letters and #
#        digits and an existing file with this name remains unchanged (but can still  #
#        be used for logging)                                                         #
#   $2 - the requested size of the ring buffer file, if it's missing, 8192 bytes are  #
#        used (the same size is used by 'showshringbuf', if the file does not exist), #
#        the size has to be specified in KBytes (1KByte = 1024 Byte) and it has to be #
#        a value between 8 and 64                                                     #
#   $3 - 'old' to use the format, which was supported up to FRITZ!OS 07.0x            #
#        'new' to use the format, which was introduced in FRITZ!OS 07.0x              #
#        If this parameter is missing, '/usr/bin/showshringbuf -?' is used to deter-  #
#        mine the format on the system, where this script was called.                 #
#                                                                                     #
# return code:                                                                        #
#   0 - ring buffer file created                                                      #
#   1 - parameter error, e.g. the specified facility is invalid (too long or contains #
#       invalid character) or the specified size is invalid                           #
#   2 - ring buffer file does already exist, the file was not changed                 #
#   3 - no binary found for auto-detection of used format                             #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: printf dd                                                                        #
# W: showshringbuf grep                                                               #
# F: yf_is_decimal yf_pack                                                            #
# I: -                                                                                #
# K: fritzbox                                                                         #
#                                                                                     #
#######################################################################################
yf_initialize_ringbuffer()
(
	facility="$1" 
	size="${2:-8}"
	[ ${#facility} -eq 0 ] && return 1
	[ ${#facility} -gt 8 ] && return 1
	check=$(printf "%s\n" "$facility" | sed -e "s|[a-z0-9]||g")
	[ ${#check} -gt 0 ] && return 1
	yf_is_decimal $size || return 1
	( [ $size -ge 8 ] && [ $size -le 64 ] ) || return 1
	filename=/var/.srb_$facility
	[ -f $filename ] && return 2
	f=0
	[ "$3" = "old" ] && f=1
	[ "$3" = "new" ] && f=2
	[ $f -eq 0 ] && showshringbuf -? 2>&1 | grep -q -- '-m[ \t]*- print' && f=2
	[ $f -eq 0 ] && return 3
	dd if=/dev/zero of=$filename bs=1024 count=$size 2>/dev/null
	printf "\371\023\146\216" | $bb dd of=$filename bs=4 count=1 conv=notrunc seek=0 2>/dev/null
	if [ $f -eq 1 ]; then
		value=$(( size * 1024 - 1 ))
		# first entry
		printf "\024" | $bb dd of=$file bs=1 count=1 conv=notrunc seek=7 2>/dev/null
		# last entry
		printf "\024" | $bb dd of=$file bs=1 count=1 conv=notrunc seek=11 2>/dev/null
		# next entry
		printf "\024" | $bb dd of=$file bs=1 count=1 conv=notrunc seek=15 2>/dev/null
		offset=19
	else
		value=$(( size * 1024 ))
		offset=15
	fi
	while [ $value -gt 0 ]; do
		mask=$(printf "\\%03o" $(( value % 256 )))
		printf "$mask" | $bb dd of=$file bs=1 count=1 conv=notrunc seek=$offset 2>/dev/null
		offset=$(( offset - 1 ))
		value=$(( value >> 8 ))
	done
	return 0
)
