#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################
#                                                                                     #
# hex2bin - convert hexadecimal string to binary data                                 #
#                                                                                     #
# parameters:                                                                         #
#   $1 - optional string to convert, if STDIN is connected to a terminal device       #
#                                                                                     #
# stdin:                                                                              #
#   stream with hexadecimal characters (0-9 and A-F/a-f and optional whitespaces,     #
#   incl. newline and carriage-return)                                                #
#                                                                                     #
# stdout:                                                                             #
#   input stream converted to binary content                                          #
#                                                                                     #
# return code:                                                                        #
#   0 - stdout content is valid                                                       #
#   1 - error occured (e.g. input format is invalid or 'cmp' command not available)   #
#                                                                                     #
# remarks:                                                                            #
# The output of converted data is done immediately while reading input stream. If an  #
# invalid character is detected somewhere in the input stream, the output stream will #
# be incomplete, because the conversion will be aborted. Check the return code to     #
# distinguish between a successful and complete conversion and a failure.             #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: dd printf                                                                        #
# W: -                                                                                #
# F: -                                                                                #
# I: -                                                                                #
# K: convert                                                                          #
#                                                                                     #
#######################################################################################
yf_hex2bin()
(
	yf_hex2bin_read_octal()
	{
		i=1
		h=1
		z=0
		while read p l o; do
			[ $i -lt $p ] && return 1 # zero bytes on input stream are an error
			i=$(( i + 1 ))
			if [ $o -eq 11 ] || [ $o -eq 12 ] || [ $o -eq 15 ] || [ $o -eq 40 ]; then
				[ $h -eq 1 ] && continue || return 1 # whitespace after odd hex-digits
			fi
			if [ $o -ge 60 ] && [ $o -le 67 ]; then
				c=$(( o - 60 ))
			elif [ $o -ge 70 ] && [ $o -le 71 ]; then
				c=$(( o - 62 ))
			elif [ $o -ge 101 ] && [ $o -le 106 ]; then
				c=$(( o - 91 ))
			elif [ $o -ge 141 ] && [ $o -le 146 ]; then
				c=$(( o - 131 ))
			else
				return 1 # invalid character found
			fi
			if [ $h -eq 0 ]; then
				v=$(( v + c ))
				if [ $v -eq 0 ]; then
					z=$(( z + 1 )) # count consecutive zeros
				else
					if [ $z -gt 0 ]; then
						dd if=/dev/zero bs=$z count=1 2>/dev/null
						z=0
					fi
					printf "%b" "\0$(( v >> 6 ))$(( ( v >> 3 ) & 7 ))$(( v & 7 ))"
				fi
				h=1
			else
				v=$(( c * 16 ))
				h=0
			fi
		done
		[ $z -gt 0 ] && dd if=/dev/zero bs=$z count=1 2>/dev/null
		return 0
	}

	if [ -t 0 ]; then
		[ -z "$1" ] && return 0 || printf "%s" "$1" | yf_hex2bin
		return $?
	fi
	command -v cmp 2>/dev/null 1>&2 || return 1
	command cmp -l -- /dev/zero - 2>/dev/null | yf_hex2bin_read_octal
	return $?
)
