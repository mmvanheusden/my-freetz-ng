#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################
#                                                                                     #
# base64 - convert STDIN to a base64 string, if no 'base64' command exists, try to    #
#          run an emulation using a (POSIX-compatible) 'cmp -l' command               #
#                                                                                     #
# parameters:                                                                         #
#   none                                                                              #
#                                                                                     #
# stdin:                                                                              #
#   the content to convert                                                            #
#                                                                                     #
# stdout:                                                                             #
#   the base64 encoded input                                                          #
#                                                                                     #
# return code:                                                                        #
#   0 - stdout value is valid                                                         #
#   1 - error occured, 'base64' or a POSIX compatible 'cmp' command was not found;    #
#       another possible error is a STDIN descriptor attached to a terminal           #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: cmp expr printf                                                                  #
# W: base64                                                                           #
# I: -                                                                                #
# F: -                                                                                #
# K: base64                                                                           #
#                                                                                     #
#######################################################################################
yf_base64()
(
	__yf_base64_charset="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	
	__yf_base64_append()
	{
		if ! [ $1 = eof ]; then
			l=$(( l + 1 ))
			v=$(( ( v * 256 ) + $1 ))
		else
			[ $l -eq 0 ] && return
			v=$(( v << ( 8 * ( 3 - l ) ) ))
		fi
		if [ $l -eq 3 ] || [ $1 = eof ]; then
			printf "%c" $(expr "${__yf_base64_charset}" : ".\{$(( v >> 18 ))\}\(.\).*")
			printf "%c" $(expr "${__yf_base64_charset}" : ".\{$(( ( v >> 12 ) % 64 ))\}\(.\).*")
			[ $l -eq 1 ] && printf "==" && return
			printf "%c" $(expr "${__yf_base64_charset}" : ".\{$(( ( v >> 6 ) % 64 ))\}\(.\).*")
			[ $l -eq 2 ] && printf "=" && return
			printf "%c" $(expr "${__yf_base64_charset}" : ".\{$(( v % 64 ))\}\(.\).*")
			l=0
			v=0
			k=$(( k + 1 ))
			[ $k -eq 19 ] && printf "\n" && k=0
		fi
	}

	__yf_base64_read_octal()
	{
		i=1
		l=0
		v=0
		k=0
		ff=0
		while read pos left right; do
			while [ $i -lt $pos ]; do # zeros are equal for 'cmp'
				if [ $ff -eq 1 ]; then
					yf_base64_append 377
					ff=0
					i=$(( i + 1 ))
				fi
				__yf_base64_append 0
				i=$(( i + 1 ))
			done
			if [ $right = 377 ] && [ $ff -eq 0 ]; then
				ff=1
				continue
			fi
			__yf_base64_append 0$right
			i=$(( pos + 1 ))
		done
		__yf_base64_append eof
	}

	[ -t 0 ] && return 1
	if command -v base64 2>/dev/null 1>&2 ; then
		command base64
		rc=$?
	else
		command -v cmp 2>/dev/null 1>&2 || return 1	
		( cat; printf "%b" "\377" ) | command cmp -l -- /dev/zero - 2>/dev/null | __yf_base64_read_octal
		printf "\n"
	fi
	return $rc
)
