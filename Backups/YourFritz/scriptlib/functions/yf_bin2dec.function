#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################
#                                                                                     #
# bin2dec - convert binary data its decimal representation (via 'cmp' utility)        #
#                                                                                     #
# parameters:                                                                         #
#   $1 - optional specification of the endianess to use (L or B) - if unspecified,    #
#        the endianess of the system we're running on is used                         #
#                                                                                     #
# stdio:                                                                              #
#   binary data to read                                                               #
#                                                                                     #
# stdout:                                                                             #
#   the decimal value of the input data                                               #
#                                                                                     #
# return code:                                                                        #
#   always 0 - no errors possible, empty input results in empty output                #
#                                                                                     #
# remarks:                                                                            #
#   If the provided data may not be expressed as a number using shell arithmetics,    #
#   the behavior is undefined.                                                        #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: printf cmp                                                                       #
# W: -                                                                                #
# F: yf_endianess                                                                     #
# I: -                                                                                #
# K: convert                                                                          #
#                                                                                     #
#######################################################################################
yf_bin2dec()
(
	yf_bin2dec_read_octal()
	{
		e=$1
		i=1
		l=0
		v=0
		s=-8
		ff=0
		while read pos left right; do
			if [ $ff -eq 1 ]; then
				[ $e -eq 0 ] && v=$(( v * 256 )) || s=$(( s + 8 ))
				[ $e -eq 0 ] && ff=255 || ff=$(( 255 << s )) 
				v=$(( v + ff ))
				i=$(( i + 1 ))
				ff=0
			fi
			while [ $i -lt $pos ]; do # insert zeros for missing bytes
				[ $e -eq 0 ] && v=$(( v * 256 )) || s=$(( s + 8 ))
				i=$(( i + 1 ))
			done
			if [ $right = 377 ] && [ $ff -eq 0 ]; then
				ff=1
				continue
			fi
			[ $e -eq 0 ] && v=$(( v * 256 )) || s=$(( s + 8 ))
			[ $e -eq 0 ] && right=$(( 0$right )) || right=$(( 0$right << s )) 
			v=$(( v + right ))
			i=$(( pos + 1 ))
		done
		printf "%d" $v
	}

	[ -t 0 ] && return 1
	command -v cmp 2>/dev/null 1>&2 || return 1
	if ! [ -z "$1" ]; then
		e=0
		[ "$1" = L ] && e=1
		[ $e -eq 0 ] && [ "$1" != B ] && return 1
	else
		[ $(yf_endianess) = L ] && e=1 || e=0
	fi
	( cat; printf "%b" "\377" ) | command cmp -l -- /dev/zero - 2>/dev/null | yf_bin2dec_read_octal $e
	return 0
)
