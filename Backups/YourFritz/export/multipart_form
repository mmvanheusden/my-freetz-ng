#! /bin/true
# SPDX-License-Identifier: GPL-2.0-or-later
errmsg() { printf "%s\n" "$*" 1>&2; }
check_form()
{
	local form="$1" rc=0
	if [ -d $form ]; then
		if [ ! -f $form/content ]; then
			errmsg "The specified form directory '$form' does not contain a valid multipart form-data structure."
			rc=1
		else
			if [ ! -w $form/content ]; then
				errmsg "The specified form directory '$form' does not contain a valid multipart form-data structure."
				rc=1
			fi
		fi
	else
		errmsg "The specified form directory '$form' is invalid."
		rc=1
	fi
	return $rc
}
field_header()
{
	local type
	[ ${#2} -gt 0 ] && type="$(echo -e -n "\r\nContent-Type: $2")"
	echo -n "Content-Disposition: form-data; name=\"$1\"$type"
}
content_length()
{
	local form="$1" tab=$'\t' part name hdr boundary
	boundary="$(cat $form/boundary)"
	len=0
	while read line; do
		part="${line%%${tab}*}"
		name="${line#*${tab}}"
		type="${name#*${tab}}"
		[ ${#type} -gt 0 ] && name="${name%%${tab}*}"
		hdr="$(field_header "$name" "$type")"
		len=$(( len + 2 + 2 + ${#boundary} + 2 + ${#hdr} + 4 + $(wc -c <$form/$part) ))
	done <$form/content
	echo $(( len + 2 + 2 + ${#boundary} ))
}
post_data()
{
	local form="$1" tab=$'\t' field tf oifs="$IFS" fl
	tf=$(mktemp)
	boundary="$(cat $form/boundary)"
	cat $form/content |
	while read line; do
		field=""
		part="${line%%${tab}*}"
		name="${line#*${tab}}"
		type="${name#*${tab}}"
		[ ${#type} -gt 0 ] && name="${name%%${tab}*}"
		hdr="$(field_header "$name" "$type")"
		echo -n -e "$fl--$boundary\r\n$hdr\r\n\r\n" >>$tf
		fl="\r\n"
		cat $form/$part >>$tf
	done
	echo -n -e "\r\n--$boundary--" >>$tf
	echo -n -e "Content-Type: multipart/form-data; boundary=$boundary\r\n" >$form/formdata
	echo -n -e "Content-Length: $(wc -c <$tf)\r\n\r\n" >>$form/formdata
	cat $tf >>$form/formdata
	rm $tf 2>/dev/null
	echo -n -e "\r\n" >>$form/formdata
	echo "$form/formdata"	
}
op=$1
case $op in
	"new")
		if [ ${#2} -gt 0 ]; then
			errmsg "No parameters allowed for new form creation."
			rc=127
		else
			td=$(mktemp -d)
			touch $td/content
			echo -n -e "$(echo "$td$(date +%s)" | md5sum | sed -n -e "s/^\([0-9a-f]*\).*/\1/p")" >$td/boundary
			echo $td
			rc=0
		fi
		;;
	"cleanup")
		form="$2"
		if check_form $form; then
			rm -r $form 2>/dev/null
			rc=0
		else
			rc=127
		fi
		;;
	"addfield")
		form="$2"
		name="$3"
		value="$4"
		if check_form $form; then
			if [ ${#name} -eq 0 ]; then
				errmsg "Missing field name for 'addfield' operation."
				rc=127
			else
				part="$name$(date +%s)"
				echo -n -e "$value" >$form/$part
				echo -e "$part\t$name" >>$form/content
				rc=0
			fi
		else
			rc=127
		fi
		;;
	"addfile")
		form="$2"
		name="$3"
		file="$4"
		type="$5"
		if check_form $form; then
			if [ ${#name} -eq 0 ]; then
				errmsg "Missing field name for 'addfile' operation."
				rc=127
			else
				part="$name$(date +%s)"
				cat $file >$form/$part
				echo -e "$part\t$name\t$type" >>$form/content
				rc=0
			fi
		else
			rc=127
		fi
		;;
	"length")
		form="$2"
		if check_form $form; then
			content_length "$form"
			rc=0
		else
			rc=127
		fi
		;;
	"postdata")
		form="$2"
		if check_form $form; then
			cat $(post_data "$form")
			rc=0
		else
			rc=127
		fi
		;;
	"postfile")
		form="$2"
		if check_form $form; then
			post_data "$form"
			rc=0
		else
			rc=127
		fi
		;;
	*)
		errmsg "Unknown operation '$op'."
		rc=127
		;;
esac
exit $rc
