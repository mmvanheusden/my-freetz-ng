#! /bin/sh
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################################
#                                                                                                     #
# switch a FRITZ!OS device with a lost password to @SkipAuthFromHomenetwork mode                      #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2016-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script checks the current login mode (based on user IDs in the boxusers.users section of the    #
# 'ar7.cfg' file) and adds a complete new entry for the pseudo user '@SkipAuthFromHomenetwork' (with  #
# user ID 101), if the box uses the 'username and password' mode at this time. If the compatibility   #
# mode is active, its pseudo user (@CompatMode with user ID 100) will be changed to the correct data  #
# for the 'skip authentication from home-network' mode. If this mode is already active, nothing will  #
# be changed.                                                                                         #
#                                                                                                     #
# It will create its own character device to access the TFFS node 113 and will setup an user account  #
# with ID 101 and the name "@SkipAuthFromHomenetwort" - either with a modification of an existing     #
# "@CompatMode" account (it changes UID/name and removes an existing password) or it creates a        #
# brand-new user account with the needed settings.                                                    #
#                                                                                                     #
# The major device number of the TFFS driver will be read from "/proc/devices" and the script needs   #
# a writable filesystem mounted on "/tmp" - this means, the caller is responsible to ensure, that     #
#                                                                                                     #
# - procfs is mounted on /proc                                                                        #
# - a writable filesystem (usually tmpfs) is mounted on /tmp                                          #
# - no ctlmgr instance is running, which may use its own copy of the edited file and overwrite the    #
#   changes to "ar7.cfg"                                                                              #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# constants                                                                                           #
#                                                                                                     #
#######################################################################################################
tmpdir="/tmp"
proc="/proc"
ar7_minor=113
user_template="\t\tenabled = yes;\n"
user_template="${user_template}\t\tid = 101;\n"
user_template="${user_template}\t\tname = \"@SkipAuthFromHomenetwork\";\n"
user_template="${user_template}\t\temail = \"\";\n"
user_template="${user_template}\t\tpassword = \"\";\n"
user_template="${user_template}\t\tvpn_access = no;\n"
user_template="${user_template}\t\tbox_admin_rights = secobj_access_rights_readwrite_from_homenetwork_only;\n"
user_template="${user_template}\t\tnas_rights = secobj_access_rights_readwrite_from_homenetwork_only;\n"
user_template="${user_template}\t\tphone_rights = secobj_access_rights_readwrite_from_homenetwork_only;\n"
user_template="${user_template}\t\thomeauto_rights = secobj_access_rights_readwrite_from_homenetwork_only;\n"
user_template="${user_template}\t} {\n"
#######################################################################################################
#                                                                                                     #
# subfunctions                                                                                        #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# read and sort user IDs                                                                              #
#                                                                                                     #
#######################################################################################################
read_users()
{
	i=0
	while read id; do
		i=$(( i + 1 ))
		eval id_$i=$id
	done
	[ $i -eq 0 ] && return 1 # no users found, usually the source file is empty
	j=$i
	while [ $j -gt 1 ]; do
		n=1
		k=0
		while [ $k -lt $(( j - 1 )) ]; do
			k=$(( k + 1 ))
			eval l=\$id_$k
			eval r=\$id_$(( k + 1 ))
			[ $l -lt $r ] || continue
			eval id_$k=$r
			eval id_$(( k + 1 ))=$l
			n=$k
		done
		j=$n
	done
	j=0
	while [ $j -lt $i ]; do
		j=$(( j + 1 ))
		eval printf "%u:" \$id_$j
	done
}
#######################################################################################################
#                                                                                                     #
# search a user ID in the list                                                                        #
#                                                                                                     #
#######################################################################################################
find_userid()
{
	i="$2"
	IFS=:
	set -- $1
	while [ $# -gt 0 ]; do
		[ $1 -eq $i ] && return 0
		shift
	done
	return 1
}
#######################################################################################################
#                                                                                                     #
# check debug option                                                                                  #
#                                                                                                     #
#######################################################################################################
if [ "$1" = "-d" ] || [ "$1" = "--debug" ]; then
	debug=1
	shift
else
	debug=0
fi
#######################################################################################################
#                                                                                                     #
# determine the major device number for TFFS nodes                                                    #
#                                                                                                     #
#######################################################################################################
if ! [ -e "$proc/devices" ]; then
	[ $debug -eq 1 ] && printf "The file '%s/devices' does not exist, please mount procfs first.\n" "$proc" 1>&2
	exit 1
fi
major=$(sed -n -e "s|^ *\([0-9]\{1,3\}\) tffs\$|\1|p" "$proc/devices")
if [ ${#major} -eq 0 ]; then
	[ $debug -eq 1 ] && printf "No TFFS device was found in '%s/devices'.\n" "$proc" 1>&2
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# create a character device for our TFFS node                                                         #
#                                                                                                     #
#######################################################################################################
if ! [ -d "$tmpdir" ]; then
	[ $debug -eq 1 ] && printf "The directory '%s' does not exist.\n" "$tmpdir" 1>&2
	exit 1
fi
node_name="$tmpdir/$$_add_user_cdev"
rm "$node_name" 2>/dev/null
touch "$node_name" 2>/dev/null
if ! [ -e "$node_name" ]; then
	[ $debug -eq 1 ] && printf "The directory '%s' is not writable.\n" "$tmpdir" 1>&2
	exit 1
fi
rm "$node_name" 2>/dev/null
mknod -m 666 "$node_name" c $major $ar7_minor
if ! [ -c "$node_name" ]; then
	[ $debug -eq 1 ] && printf "Error creating character device for the TFFS stream.\n" 1>&2
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# copy the existing content and collect the present user IDs                                          #
#                                                                                                     #
#######################################################################################################
copy="$tmpdir/$$_add_user_org"
cat "$node_name" >"$copy" 2>/dev/null
new_users="$tmpdir/$$_add_user_boxusers"
new_user="$tmpdir/$$_add_user_adduser"
sed -n -e "/^boxusers/,/^}/p" "$copy" >"$new_users"
userids="$(sed -n -e "/^[ \t]*id =/s|.* = \([0-9]*\);|\1|p" $new_users | read_users)"
#######################################################################################################
#                                                                                                     #
# check login mode                                                                                    #
#                                                                                                     #
#######################################################################################################
if find_userid "$userids" 101; then # @NoAuthFromHomenetwork - no reason to set a new user
	[ $debug -eq 1 ] && printf "Login mode is already set to @SkipAuthFromHomenetwork, nothing was changed.\n" 1>&2
	action=0
elif find_userid "$userids" 100; then # @CompatMode - change user ID and name and remove any password
	sed -n -e "/^[ \t]*users {\$/,/[ \t]*}\$/p" "$new_users" | \
	sed -e "/id = 100/,/name =/s|name = \"[^\"]*\";|name = \"@SkipAuthFromHomenetwork\";|" | \
	sed -e "/id = 100/,/password =/s|password = \"[^\"]*\";|password = \"###REMOVETHISLINE###\";|" | \
	sed -e "/###REMOVETHISLINE###/d" | \
	sed -e "/id = 100/s|100|101|" >"$new_user"
	sed -e "/[ \t]*}\$/,\$d" "$new_user" >"$new_users"
	printf "\t}\n" >>"$new_users"
	[ $debug -eq 1 ] && printf "Login mode was set to '@CompatMode', changed it to '@SkipAuthFromHomenetwork'.\n" 1>&2
	action=1
else # add a complete new account for @SkipAuthFromHomenetwork
	printf "$user_template" >"$new_user"
	sed -n -e "/^boxusers/,/^}/p" "$copy" | sed -e "/^[ \t]*users {\$/r $new_user" | sed -e "1d" -e "/[ \t]*}\$/,\$d" >"$new_users"
	[ $debug -eq 1 ] && printf "Added a new user entry for '@SkipAuthFromHomenetwork'.\n" 1>&2
	printf "\t}\n" >>"$new_users"
	action=1
fi
#######################################################################################################
#                                                                                                     #
# edit the original file and replace the boxusers.users section with our new file                     #
#                                                                                                     #
#######################################################################################################
[ $action -eq 1 ] && sed -e "/^[ \t]*users {\$/,/^[ \t]*}\$/d" "$copy" | sed -e "/^boxusers/r $new_users" >"$node_name"
#######################################################################################################
#                                                                                                     #
# remove temporary files                                                                              #
#                                                                                                     #
#######################################################################################################
rm "$copy" "$new_users" "$new_user" "$node_name" 2>/dev/null
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
exit 0
